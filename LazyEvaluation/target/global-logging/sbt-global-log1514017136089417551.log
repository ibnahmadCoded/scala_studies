[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\ALIYUA~1\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\ALIYUA~1\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 1.8.0_321)
[debug]       Load.loadUnit: plugins took 81.3206ms
[debug]       Load.loadUnit: defsScala took 0.2298ms
[debug] [Loading] Scanning directory C:\Users\Aliyu Alege\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Aliyu Alege\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.8804 ms
[debug]           Load.resolveProject(global-plugins) took 41.9987ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Aliyu Alege\.sbt\1.0\plugins, plugins: List(<none>))) took 79.2381ms
[debug] [Loading] Done in C:\Users\Aliyu Alege\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 94.7286ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2018ms
[debug]     Load.loadUnit(file:/C:/Users/Aliyu%20Alege/.sbt/1.0/plugins/, ...) took 182.0863ms
[debug]   Load.apply: load took 305.879ms
[debug]   Load.apply: resolveProjects took 5.033ms
[debug]   Load.apply: finalTransforms took 53.3863ms
[debug]   Load.apply: config.delegates took 9.2372ms
[debug]   Load.apply: Def.make(settings)... took 356.2711ms
[debug]   Load.apply: structureIndex took 97.601ms
[debug]   Load.apply: mkStreams took 2.1172ms
[info] loading global plugins from C:\Users\Aliyu Alege\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2517.1937ms
[debug]           Load.loadUnit: plugins took 24.0877ms
[debug]           Load.loadUnit: defsScala took 0.004ms
[debug] [Loading] Scanning directory C:\Users\Aliyu Alege\Desktop\scala_samples\LazyEvaluation\project
[debug]             Load.loadUnit: mkEval took 8.5813ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Aliyu Alege\Desktop\scala_samples\LazyEvaluation\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.939 ms
[info] loading settings for project lazyevaluation-build from idea.sbt ...
[debug]               Load.resolveProject(lazyevaluation-build) took 5.2691ms
[debug]             Load.loadTransitive: finalizeProject(Project(id lazyevaluation-build, base: C:\Users\Aliyu Alege\Desktop\scala_samples\LazyEvaluation\project, plugins: List(<none>))) took 10.1356ms
[debug] [Loading] Done in C:\Users\Aliyu Alege\Desktop\scala_samples\LazyEvaluation\project, returning: (lazyevaluation-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2226.352ms
[debug]           Load.loadUnit: cleanEvalClasses took 7.9346ms
[debug]         Load.loadUnit(file:/C:/Users/Aliyu%20Alege/Desktop/scala_samples/LazyEvaluation/project/, ...) took 2259.6413ms
[debug]       Load.apply: load took 2261.9423ms
[debug]       Load.apply: resolveProjects took 0.172ms
[debug]       Load.apply: finalTransforms took 17.0814ms
[debug]       Load.apply: config.delegates took 0.6724ms
[debug]       Load.apply: Def.make(settings)... took 78.6263ms
[debug]       Load.apply: structureIndex took 28.4253ms
[debug]       Load.apply: mkStreams took 0.0029ms
[info] loading project definition from C:\Users\Aliyu Alege\Desktop\scala_samples\LazyEvaluation\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4267.979ms
[debug]     Load.loadUnit: defsScala took 0.003ms
[debug] [Loading] Scanning directory C:\Users\Aliyu Alege\Desktop\scala_samples\LazyEvaluation
[debug]       Load.loadUnit: mkEval took 0.2145ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.448 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 28.3202ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Aliyu Alege\Desktop\scala_samples\LazyEvaluation, plugins: List(<none>))) took 32.8536ms
[debug] [Loading] Done in C:\Users\Aliyu Alege\Desktop\scala_samples\LazyEvaluation, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1046.158ms
[debug]     Load.loadUnit: cleanEvalClasses took 7.2385ms
[debug]   Load.loadUnit(file:/C:/Users/Aliyu%20Alege/Desktop/scala_samples/LazyEvaluation/, ...) took 5322.0858ms
[debug] Load.apply: load took 5323.8165ms
[debug] Load.apply: resolveProjects took 0.1782ms
[debug] Load.apply: finalTransforms took 22.1423ms
[debug] Load.apply: config.delegates took 0.4482ms
[debug] Load.apply: Def.make(settings)... took 61.5214ms
[debug] Load.apply: structureIndex took 48.75ms
[debug] Load.apply: mkStreams took 0.0024ms
[info] set current project to LazyEvaluation (in build file:/C:/Users/Aliyu%20Alege/Desktop/scala_samples/LazyEvaluation/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 55406 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 55406, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to LazyEvaluation (in build file:/C:/Users/Aliyu%20Alege/Desktop/scala_samples/LazyEvaluation/)
[debug] > Exec(idea-shell, None, None)
