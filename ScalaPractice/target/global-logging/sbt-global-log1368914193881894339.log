[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\ALIYUA~1\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\ALIYUA~1\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 1.8.0_321)
[debug]       Load.loadUnit: plugins took 157.6018ms
[debug]       Load.loadUnit: defsScala took 0.4706ms
[debug] [Loading] Scanning directory C:\Users\Aliyu Alege\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Aliyu Alege\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 24.3918 ms
[debug]           Load.resolveProject(global-plugins) took 53.4348ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Aliyu Alege\.sbt\1.0\plugins, plugins: List(<none>))) took 117.3861ms
[debug] [Loading] Done in C:\Users\Aliyu Alege\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 159.1502ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2491ms
[debug]     Load.loadUnit(file:/C:/Users/Aliyu%20Alege/.sbt/1.0/plugins/, ...) took 328.4956ms
[debug]   Load.apply: load took 573.9923ms
[debug]   Load.apply: resolveProjects took 5.7691ms
[debug]   Load.apply: finalTransforms took 175.6773ms
[debug]   Load.apply: config.delegates took 14.8671ms
[debug]   Load.apply: Def.make(settings)... took 701.831ms
[debug]   Load.apply: structureIndex took 136.0998ms
[debug]   Load.apply: mkStreams took 2.2183ms
[info] loading global plugins from C:\Users\Aliyu Alege\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 6933.4295ms
[debug]           Load.loadUnit: plugins took 27.2537ms
[debug]           Load.loadUnit: defsScala took 0.0041ms
[debug] [Loading] Scanning directory C:\Users\Aliyu Alege\Desktop\scala_samples\ScalaPractice\project
[debug]             Load.loadUnit: mkEval took 7.6656ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Aliyu Alege\Desktop\scala_samples\ScalaPractice\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.7853 ms
[info] loading settings for project scalapractice-build from idea.sbt ...
[debug]               Load.resolveProject(scalapractice-build) took 4.5428ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scalapractice-build, base: C:\Users\Aliyu Alege\Desktop\scala_samples\ScalaPractice\project, plugins: List(<none>))) took 7.0182ms
[debug] [Loading] Done in C:\Users\Aliyu Alege\Desktop\scala_samples\ScalaPractice\project, returning: (scalapractice-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2145.0674ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.5431ms
[debug]         Load.loadUnit(file:/C:/Users/Aliyu%20Alege/Desktop/scala_samples/ScalaPractice/project/, ...) took 2176.7735ms
[debug]       Load.apply: load took 2178.0195ms
[debug]       Load.apply: resolveProjects took 0.124ms
[debug]       Load.apply: finalTransforms took 6.3123ms
[debug]       Load.apply: config.delegates took 0.4571ms
[debug]       Load.apply: Def.make(settings)... took 82.4339ms
[debug]       Load.apply: structureIndex took 23.783ms
[debug]       Load.apply: mkStreams took 0.0023ms
[info] loading project definition from C:\Users\Aliyu Alege\Desktop\scala_samples\ScalaPractice\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 5913.096ms
[debug]     Load.loadUnit: defsScala took 0.005ms
[debug] [Loading] Scanning directory C:\Users\Aliyu Alege\Desktop\scala_samples\ScalaPractice
[debug]       Load.loadUnit: mkEval took 0.3541ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.7103 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 38.5469ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Aliyu Alege\Desktop\scala_samples\ScalaPractice, plugins: List(<none>))) took 42.364ms
[debug] [Loading] Done in C:\Users\Aliyu Alege\Desktop\scala_samples\ScalaPractice, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1419.4723ms
[debug]     Load.loadUnit: cleanEvalClasses took 7.3893ms
[debug]   Load.loadUnit(file:/C:/Users/Aliyu%20Alege/Desktop/scala_samples/ScalaPractice/, ...) took 7341.2296ms
[debug] Load.apply: load took 7343.167ms
[debug] Load.apply: resolveProjects took 0.8009ms
[debug] Load.apply: finalTransforms took 27.2061ms
[debug] Load.apply: config.delegates took 0.2731ms
[debug] Load.apply: Def.make(settings)... took 61.1825ms
[debug] Load.apply: structureIndex took 20.7311ms
[debug] Load.apply: mkStreams took 0.0029ms
[info] set current project to ScalaPractice (in build file:/C:/Users/Aliyu%20Alege/Desktop/scala_samples/ScalaPractice/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 64669 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 64669, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ScalaPractice (in build file:/C:/Users/Aliyu%20Alege/Desktop/scala_samples/ScalaPractice/)
[debug] > Exec(idea-shell, None, None)
